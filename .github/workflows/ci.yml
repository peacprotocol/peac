name: CI

on:
  pull_request:
    branches: ['main', 'release/*']
  push:
    branches: ['main', 'release/*']

jobs:
  verify-build-test:
    runs-on: ubuntu-latest
    timeout-minutes: 20 # Increased for dual structure builds
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            packages/**/package-lock.json
            pkgs/**/package-lock.json

      - name: Install deps
        run: |
          echo "::group::Installing dependencies"
          npm ci --no-audit --no-fund
          echo "::endgroup::"

      - name: Hygiene – forbid TODO/FIXME/HACK/DEBUG in prod code
        timeout-minutes: 2
        run: |
          echo "::group::Checking for TODO/FIXME/HACK/DEBUG (src only)"
          echo "Checking production source directories..."
          if git grep -nE '(TODO|FIXME|HACK|WIP|^\s*//\s*DEBUG)' -- \
            packages/server/src \
            packages/schema/src \
            packages/sdk-js/sdk \
            pkgs/*/src 2>/dev/null; then
            echo "::error::Found TODO/FIXME/HACK/DEBUG markers in production code"
            echo "::endgroup::"
            exit 1
          fi
          echo "✓ No forbidden markers in production code"
          echo "::endgroup::"

      - name: Lint (TypeScript) - Legacy packages
        timeout-minutes: 3
        run: |
          echo "::group::ESLint TypeScript (legacy packages)"
          if [ -d "packages/server" ]; then
            timeout 180s npx eslint packages/server --ext .ts --max-warnings=0
          fi
          echo "::endgroup::"

      - name: Lint (TypeScript) - Ultra-lean packages
        timeout-minutes: 3
        run: |
          echo "::group::ESLint TypeScript (pkgs)"
          for pkg in pkgs/*/src; do
            if [ -d "$pkg" ]; then
              echo "Linting $pkg..."
              timeout 60s npx eslint "$pkg" --ext .ts --max-warnings=0 || echo "::warning::Lint failed for $pkg"
            fi
          done
          echo "::endgroup::"

      - name: Build schema package (required for type-check)
        timeout-minutes: 2
        run: |
          echo "::group::Building schema packages"
          if [ -f "packages/schema/package.json" ]; then
            cd packages/schema && timeout 120s npm run build && cd ../..
          fi
          echo "::endgroup::"

      - name: Type check - Legacy packages
        timeout-minutes: 3
        run: |
          echo "::group::TypeScript compilation check (legacy)"
          if [ -f "packages/server/package.json" ]; then
            timeout 180s npm --workspace @peacprotocol/server run type-check || echo "::warning::Legacy type-check failed"
          fi
          echo "::endgroup::"

      - name: Type check - Ultra-lean packages  
        timeout-minutes: 5
        run: |
          echo "::group::TypeScript compilation check (pkgs)"
          for pkg in pkgs/*/tsconfig.json; do
            if [ -f "$pkg" ]; then
              dir=$(dirname "$pkg")
              echo "Type-checking $dir..."
              cd "$dir" && timeout 60s npx tsc --noEmit && cd ../.. || echo "::warning::Type-check failed for $dir"
            fi
          done
          echo "::endgroup::"

      - name: Prettier (check)
        timeout-minutes: 2
        run: |
          echo "::group::Prettier formatting check"
          timeout 120s npm run format:check
          echo "::endgroup::"

      - name: Build all workspaces
        timeout-minutes: 8
        run: |
          echo "::group::Building all packages"
          timeout 480s npm run build --workspaces || echo "::warning::Some workspace builds failed"
          echo "::endgroup::"

      - name: Build ultra-lean packages
        timeout-minutes: 5
        run: |
          echo "::group::Building ultra-lean packages"
          for pkg in pkgs/*/package.json; do
            if [ -f "$pkg" ]; then
              dir=$(dirname "$pkg")
              echo "Building $dir..."
              if [ -f "$dir/tsconfig.json" ]; then
                cd "$dir" && timeout 60s npx tsc && cd ../.. || echo "::warning::Build failed for $dir"
              fi
            fi
          done
          echo "::endgroup::"

      - name: Run server tests
        timeout-minutes: 10
        run: |
          echo "::group::Running server tests (if exists)"
          if [ -d "packages/server" ]; then
            cd packages/server
            NODE_ENV=test PAYMENT_PROVIDER=mock PEAC_WEBHOOK_SECRET=test_secret \
              npm test -- --coverage --runInBand --detectOpenHandles || echo "::warning::Server tests failed"
            cd ../..
          fi
          echo "::endgroup::"

      - name: Run ultra-lean package tests
        timeout-minutes: 10
        run: |
          echo "::group::Running ultra-lean package tests"
          for pkg in pkgs/*/src; do
            if [ -d "$pkg" ]; then
              dir=$(dirname "$pkg")
              if ls "$pkg"/*.test.* 1> /dev/null 2>&1; then
                echo "Running tests in $dir..."
                cd "$dir" && timeout 120s npm test 2>/dev/null || echo "::warning::Tests failed for $dir"
                cd ../..
              fi
            fi
          done
          echo "::endgroup::"

      - name: Check for dangling Node processes
        shell: bash
        run: |
          echo "::group::Dangling Node check"
          # List any remaining node processes; ignore none found (pgrep exit 1)
          # Use word boundary to match actual node processes, not kernel threads
          REMAINING="$(pgrep -af '\bnode\b' || true)"
          if [ -z "$REMAINING" ]; then
            echo "No lingering node processes."
            echo "::endgroup::"
            exit 0
          fi
          # Filter out kernel threads (in brackets) and grep commands
          FILTERED="$(echo "$REMAINING" | grep -Ev '^\s*[0-9]+\s+\[.*\]|pgrep|grep' || true)"
          if [ -z "$FILTERED" ]; then
            echo "No lingering node processes (only kernel threads found)."
            echo "::endgroup::"
            exit 0
          fi
          COUNT=$(echo "$FILTERED" | wc -l | tr -d ' ')
          if [ "$COUNT" -gt 0 ]; then
            echo "::error::Found dangling Node processes:"
            echo "$FILTERED"
            echo "::endgroup::"
            exit 1
          fi
          echo "No lingering node processes."
          echo "::endgroup::"

      - name: Enforce coverage threshold
        timeout-minutes: 1
        run: |
          echo "::group::Coverage threshold enforcement"
          THRESH=50
          if [ -f packages/server/coverage/coverage-summary.json ]; then
            cd packages/server
            ACTUAL=$(node -e "console.log(require('./coverage/coverage-summary.json').total.statements.pct)")
            echo "Coverage: ${ACTUAL}% (threshold: ${THRESH}%)"
            if (( $(echo "${ACTUAL} >= ${THRESH}" | bc -l) )); then
              echo "✓ Coverage threshold met"
            else
              echo "::warning::Coverage ${ACTUAL}% is below threshold ${THRESH}%"
            fi
            cd ../..
          else
            echo "::warning::Coverage summary not found, skipping threshold check"
          fi
          echo "::endgroup::"

      - name: Test (sdk-js)
        timeout-minutes: 10
        run: |
          echo "::group::Running SDK tests (if exists)"
          if [ -d "packages/sdk-js" ]; then
            cd packages/sdk-js
            CI=true npx jest --ci --runInBand --colors --forceExit || echo "::warning::SDK tests failed"
            cd ../..
          fi
          echo "::endgroup::"

      - name: OpenAPI lint (capabilities spec)
        timeout-minutes: 2
        working-directory: packages/server
        run: |
          echo "::group::OpenAPI specification validation"
          timeout 120s npm exec -- redocly lint openapi/peac.capabilities.v0_9_6.yaml || echo "::warning::Capabilities spec lint failed (non-blocking)"
          echo "::endgroup::"

      - name: OpenAPI lint (v0.9.11 authoritative spec)
        timeout-minutes: 2
        run: |
          echo "::group::OpenAPI v0.9.11 authoritative specification validation"
          timeout 120s npx @stoplight/spectral-cli lint openapi/openapi.yaml || echo "::warning::OpenAPI spec lint failed (non-blocking)"
          echo "::endgroup::"

      - name: Security audit
        timeout-minutes: 2
        run: |
          echo "::group::Security audit (production deps)"
          timeout 120s npm audit --omit=dev || echo "::warning::Audit check failed (non-blocking)"
          echo "::endgroup::"

      - name: SBOM
        timeout-minutes: 2
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "::group::Generate SBOM"
          timeout 120s npm --workspace @peacprotocol/server run sbom || echo "::warning::SBOM generation failed (non-blocking)"
          echo "::endgroup::"

      - name: Verify protocol v0.9.12 policy
        timeout-minutes: 2
        run: |
          echo "::group::Protocol version and header validation"
          echo "==> Version sanity (root)"
          ROOT_VER=$(node -e "console.log(require('./package.json').version||'')")
          if [ "$ROOT_VER" != "0.9.12" ]; then
            echo "ERROR: Root package.json version is '$ROOT_VER', expected '0.9.12'"
            exit 1
          fi

          echo "==> Forbid x-peac-* headers (v0.9.12+ breaking change)"
          if git grep -rE 'x-peac-' -- packages/ pkgs/ 2>/dev/null | grep -v 'test\|spec' | head -5; then
            echo "::warning::Found x-peac-* references (should migrate to PEAC-Receipt)"
          fi

          echo "==> Ensure PEAC-Receipt header usage"  
          if git grep -r "peac-receipt\|PEAC-Receipt" -- packages/ pkgs/ 2>/dev/null | head -5; then
            echo "✓ Found PEAC-Receipt header usage"
          fi

          echo "==> Check ultra-lean package structure"
          for pkg in pkgs/*/package.json; do
            if [ -f "$pkg" ]; then
              echo "Found ultra-lean package: $(dirname "$pkg")"
            fi
          done

          echo "✓ All protocol checks passed"
          echo "::endgroup::"

      - name: Smoke test
        timeout-minutes: 2
        if: success()
        shell: bash
        run: |
          echo "::group::Smoke test - server startup validation"
          if [ -f "packages/server/dist/index.js" ]; then
            set -euo pipefail
            # Ensure any background process is killed on exit
            trap 'jobs -p | xargs -r kill 2>/dev/null || true' EXIT

            # Start server in background
            PORT=3001 node packages/server/dist/index.js &
            SERVER_PID=$!

            # Wait for server to be ready
            echo "Waiting for server to start on port 3001..."
            for i in {1..30}; do
              if curl -fsS http://localhost:3001/.well-known/peac-capabilities >/dev/null 2>&1; then
                break
              fi
              if [ $i -eq 30 ]; then
                echo "::warning::Server failed to start within 30 seconds"
                kill $SERVER_PID 2>/dev/null || true
                echo "::endgroup::"
                exit 0
              fi
              sleep 1
            done

            # Test capabilities endpoint
            echo "Testing capabilities endpoint..."
            RESPONSE=$(curl -fsS http://localhost:3001/.well-known/peac-capabilities)
            VERSION=$(echo "$RESPONSE" | jq -r '.version')

            if [ "$VERSION" != "0.9.12" ]; then
              echo "::warning::Expected version 0.9.12, got $VERSION"
            else
              echo "✓ Server started successfully and returned correct version"
            fi

            # Kill server gracefully
            kill $SERVER_PID 2>/dev/null || true
            wait $SERVER_PID 2>/dev/null || true
          else
            echo "::warning::Legacy server not found, skipping smoke test"
          fi

          echo "::endgroup::"
