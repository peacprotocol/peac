name: CI

on:
  pull_request:
    branches: ["main"]
  push:
    branches: ["main"]

jobs:
  verify-build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          # Avoid lockfile requirement – cache on package.json files
          cache: "npm"
          cache-dependency-path: |
            package.json
            packages/*/package.json

      - name: Install deps
        run: npm ci

      - name: Check for unprofessional comments
        shell: bash
        run: |
          set -euo pipefail

          echo "Checking for TODO/FIXME/HACK/WIP/DEBUG in code (TS/JS only)…"
          # Search only code files; exclude node_modules, build outputs, coverage, docs, md, workflows, lockfiles, d.ts
          MATCHES=$(git grep -nE '(TODO|FIXME|HACK|WIP|^\s*//\s*DEBUG)' -- \
            'packages/**/*.ts' 'packages/**/*.tsx' 'packages/**/*.js' 'packages/**/*.jsx' \
            ':!**/*.d.ts' ':!node_modules/**' ':!**/dist/**' ':!coverage/**' ':!docs/**' ':!**/*.md' ':!.github/**' \
            ':!**/*.lock' ':!**/*.yml' ':!**/*.yaml' || true)

          if [[ -n "$MATCHES" ]]; then
            echo "$MATCHES"
            echo "::error::Found TODO/FIXME/HACK/WIP/DEBUG markers in code."
            exit 1
          fi
          echo "OK"

          echo "Forbidding console.log in server runtime (allowed in CLI/examples/docs)…"
          CONSOLE_MATCHES=$(git grep -n 'console\.log' -- \
            'packages/server/src/**/*.ts' 'packages/server/src/**/*.js' || true)
          if [[ -n "$CONSOLE_MATCHES" ]]; then
            echo "$CONSOLE_MATCHES"
            echo "::error::console.log usage found in packages/server/src (use the logger instead)."
            exit 1
          fi
          echo "OK"

      - name: Type check
        run: npm run type-check --workspaces --if-present

      - name: Lint
        run: npx eslint . --ext .ts

      - name: Format check
        run: npx prettier --check .

      - name: Build all workspaces
        run: npm run build --workspaces

      - name: Test all workspaces
        run: npm run test --workspaces

      - name: Security audit
        run: npm audit --omit=dev

      - name: Generate SBOM
        run: npm run sbom --workspaces --if-present

      - name: Verify protocol v0.9.6 policy
        run: |
          echo "==> Version sanity (root)"
          ROOT_VER=$(node -e "console.log(require('./package.json').version||'')")
          if [ "$ROOT_VER" != "0.9.6" ]; then
            echo "ERROR: Root package.json version is '$ROOT_VER', expected '0.9.6'"
            exit 1
          fi

          echo "==> Forbidden literals scan (server/src)"
          if grep -R -nE '0\.9\.3|0\.9\.4' packages/server/src --include='*.ts' --include='*.js'; then
            echo "ERROR: Found forbidden version literals in server/src"
            exit 1
          fi

          echo "==> Forbid legacy header name outside middleware"
          if grep -R -n "x-peac-version" packages/server/src --include='*.ts' --include='*.js' \
            | grep -v 'middleware/headers.ts'; then
            echo "ERROR: Found legacy header name x-peac-version outside middleware"
            exit 1
          fi

          echo "==> Ensure legacy header is never SET anywhere"
          if git grep -nE "setHeader\\(['\"]x-peac-version['\"]" -- packages/server \
            | grep -v "middleware/headers\\.ts"; then
            echo "ERROR: Attempt to set legacy header x-peac-version found"
            exit 1
          fi

          echo "==> Ensure protocol headers are only set in middleware"
          if git grep -nE "setHeader\\(['\"][Xx]-peac-(version|protocol-version)['\"]" -- packages/server \
            | grep -v "middleware/headers\\.ts"; then
            echo "ERROR: Protocol headers set outside middleware"
            exit 1
          fi
