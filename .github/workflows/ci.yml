name: PEAC Protocol CI/CD Pipeline

on:
  push:
    branches: [main, 'release/*']
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '8.0.0'

jobs:
  # Phase 1: Setup and Validation
  setup:
    name: Setup & Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10

    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          pnpm config set registry https://registry.npmjs.org/
          pnpm install --frozen-lockfile

      - name: Version validation
        id: version
        run: |
          VERSION=$(node -pe "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Version: $VERSION"

      - name: Workspace structure validation
        run: |
          echo "🔍 Validating workspace structure..."
          if [ ! -d "packages" ]; then
            echo "❌ packages/ directory missing"
            exit 1
          fi
          if [ ! -d "apps" ]; then
            echo "❌ apps/ directory missing" 
            exit 1
          fi
          if [ -d "pkgs" ]; then
            echo "❌ pkgs/ directory should not exist after refactor"
            exit 1
          fi
          echo "✅ Workspace structure valid"

      - name: Legacy import check
        run: |
          echo "🔍 Checking for legacy imports..."
          if grep -r "from 'pkgs/" packages/ apps/ 2>/dev/null; then
            echo "❌ Found legacy pkgs/ imports"
            exit 1
          fi
          echo "✅ No legacy imports found"

  # Phase 2: Code Quality
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          pnpm config set registry https://registry.npmjs.org/
          pnpm install --frozen-lockfile

      - name: Lint
        run: |
          echo "🔍 ESLint validation..."
          pnpm run lint

      - name: Format check
        run: |
          echo "🔍 Prettier format check..."
          pnpm run format:check

      - name: TypeScript check
        run: |
          echo "🔍 TypeScript compilation check..."
          pnpm run typecheck

      - name: TypeScript strict validation
        run: |
          echo "🔍 TypeScript strict mode validation..."
          # Check that base tsconfig doesn't have Node types
          if grep -q '"types".*"node"' tsconfig.base.json; then
            echo "❌ Node types found in base tsconfig - should be in individual packages only"
            exit 1
          fi
          echo "✅ Base tsconfig properly configured"

      - name: Error handling patterns
        run: |
          echo "🔍 Error handling pattern validation..."
          # Check for proper error handling (no .message on unknown)
          if grep -r "catch.*error.*error\.message" packages/ apps/ --include="*.ts" 2>/dev/null; then
            echo "❌ Found unsafe error.message usage - use 'error instanceof Error' checks"
            exit 1
          fi
          # Check for NodeJS namespace usage
          if grep -r "NodeJS\." packages/ apps/ --include="*.ts" 2>/dev/null; then
            echo "❌ Found NodeJS namespace usage - use ReturnType<typeof setTimeout> instead"
            exit 1
          fi
          # Check for implicit any types (keyof any pattern)
          if grep -r "keyof any" packages/ apps/ --include="*.ts" 2>/dev/null; then
            echo "❌ Found 'keyof any' usage - use proper type guards instead"
            exit 1
          fi
          echo "✅ Error handling patterns look good"

      - name: SemVer validation
        run: |
          echo "🔍 SemVer validation..."
          # Check that all package versions are valid SemVer
          node -e '
            const fs=require("fs"),path=require("path");
            const semver=/^\d+\.\d+\.\d+(-[0-9A-Za-z.-]+)?(\+[0-9A-Za-z.-]+)?$/;
            let invalid=[];
            function walk(dir){
              if(!fs.existsSync(dir)) return;
              for(const d of fs.readdirSync(dir,{withFileTypes:true})){
                if(d.isDirectory()){
                  const p=path.join(dir,d.name);
                  const pj=path.join(p,"package.json");
                  if(fs.existsSync(pj)){
                    const j=JSON.parse(fs.readFileSync(pj,"utf8"));
                    if(j.version && !semver.test(j.version)){
                      invalid.push(`${j.name}: ${j.version}`);
                    }
                  }
                  walk(p);
                }
              }
            }
            walk("packages");
            walk("apps");
            if(invalid.length){
              console.error("❌ Invalid SemVer versions found:");
              console.error(invalid.join("\n"));
              process.exit(1);
            }
            console.log("✅ All package versions are valid SemVer");
          '

      - name: Workspace dependencies check
        run: |
          echo "🔍 Workspace dependencies validation..."
          # Check that all @peac/* deps are workspace:*
          node -e '
            const fs=require("fs"),path=require("path");
            let invalid=[];
            function walk(dir){
              if(!fs.existsSync(dir)) return;
              for(const d of fs.readdirSync(dir,{withFileTypes:true})){
                if(d.isDirectory()){
                  const p=path.join(dir,d.name);
                  const pj=path.join(p,"package.json");
                  if(fs.existsSync(pj)){
                    const j=JSON.parse(fs.readFileSync(pj,"utf8"));
                    for(const field of ["dependencies","devDependencies","peerDependencies"]){
                      const deps=j[field]; if(!deps) continue;
                      for(const [k,v] of Object.entries(deps)){
                        if(k.startsWith("@peac/") && v!=="workspace:*"){
                          invalid.push(`${j.name} -> ${k}@${v}`);
                        }
                      }
                    }
                  }
                  walk(p);
                }
              }
            }
            walk("packages");
            walk("apps");
            if(invalid.length){
              console.error("❌ Non-workspace @peac/* dependencies found:");
              console.error(invalid.join("\n"));
              process.exit(1);
            }
            console.log("✅ All @peac/* dependencies are workspace:*");
          '

      - name: Lockfile validation
        run: |
          echo "🔍 Lockfile validation..."
          # Check that no package-lock.json exists
          if find . -name "package-lock.json" -not -path "./node_modules/*" | grep -q .; then
            echo "❌ package-lock.json files found - use pnpm only"
            exit 1
          fi
          echo "✅ No npm lockfiles found"

      - name: Workspace integrity check
        run: |
          echo "🔍 Workspace integrity validation..."
          # Check that all workspace:* dependencies resolve
          if ! pnpm list --depth=0 >/dev/null 2>&1; then
            echo "❌ Workspace dependencies don't resolve properly"
            exit 1
          fi
          echo "✅ Workspace dependencies resolve correctly"

      - name: Dependency boundaries
        run: |
          echo "🔍 Dependency boundary validation..."
          pnpm run dep-cruiser

  # Phase 3: Build
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [setup, quality]
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          pnpm config set registry https://registry.npmjs.org/
          pnpm install --frozen-lockfile

      - name: Build all packages
        run: |
          echo "🔨 Building all packages..."
          pnpm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            packages/*/dist
            apps/*/dist
          retention-days: 1

  # Phase 4: Test
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          pnpm config set registry https://registry.npmjs.org/
          pnpm install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Run tests with coverage
        run: |
          echo "🧪 Running test suite with coverage..."
          pnpm run test:coverage

      - name: Coverage validation
        run: |
          echo "🔍 Validating coverage thresholds..."
          # Coverage thresholds enforced in jest.config.js per package
          echo "✅ Coverage thresholds met"

  # Phase 5: Conformance & Performance
  validation:
    name: Conformance & Performance
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          pnpm config set registry https://registry.npmjs.org/
          pnpm install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Conformance testing
        run: |
          echo "🔍 Running conformance tests..."
          pnpm run conformance

      - name: Performance validation
        run: |
          echo "🚀 Running performance validation..."  
          pnpm run perf

      - name: Schema validation
        run: |
          echo "🔍 Validating JSON schemas..."
          node -e "
            const receipt = require('./schemas/receipt.v1.1.json');
            const discovery = require('./schemas/discovery.v1.1.json');
            const purge = require('./schemas/purge.v1.0.json');
            
            if (!receipt.properties.verification) throw new Error('Missing verification in receipt schema');
            if (!receipt.properties.security) throw new Error('Missing security in receipt schema');
            if (!discovery.properties.crawler_control) throw new Error('Missing crawler_control in discovery');
            
            console.log('✅ Enhanced schemas validated');
          "

  # Phase 6: Security & SBOM
  security:
    name: Security & SBOM
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          pnpm config set registry https://registry.npmjs.org/
          pnpm install --frozen-lockfile

      - name: Security audit
        run: |
          echo "🔒 Security audit..."
          pnpm audit --audit-level=high || echo "::warning::Security audit found issues (non-blocking in CI)"

      - name: Generate SBOM
        if: github.ref == 'refs/heads/main'
        run: |
          echo "📋 Generating SBOM..."
          pnpm run sbom || echo "::warning::SBOM generation failed (non-blocking)"

  # Phase 7: Production Readiness (main branch only)
  production-readiness:
    name: Production Readiness Gate
    runs-on: ubuntu-latest
    needs: [test, validation, security]
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v4

      - name: Production readiness validation
        run: |
          echo "🚀 PEAC Protocol v${{ needs.setup.outputs.version }} - Production Readiness Validation"
          echo ""
          echo "✅ All CI phases passed:"
          echo "  • Setup & validation"
          echo "  • Code quality (lint, format, typecheck, boundaries)"  
          echo "  • Build (all packages)"
          echo "  • Test suite (with coverage)"
          echo "  • Conformance & performance"
          echo "  • Security & SBOM"
          echo ""
          echo "✅ Modern monorepo structure validated"
          echo "✅ Zero legacy imports detected"  
          echo "✅ Enterprise standards compliance achieved"
          echo ""
          echo "🎯 Ready for production deployment"
