name: PEAC Release Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  quality-gates:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        node-version: [18, 20]

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v3
        with:
          version: 8

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate test vectors
        run: |
          node tests/golden/generate-vectors.js
          VECTOR_COUNT=$(find tests/golden/receipt-vectors -name "*.json" | wc -l)
          echo "Generated $VECTOR_COUNT test vectors"
          if [ $VECTOR_COUNT -lt 100 ]; then
            echo "‚ùå Need 100+ vectors, got $VECTOR_COUNT"
            exit 1
          fi

      - name: Typecheck
        run: pnpm run typecheck

      - name: Lint
        run: pnpm eslint . --max-warnings 0

      - name: Schema validation (compile)
        run: npx ajv compile -s schemas/receipt-0.9.json

      - name: Unit tests
        run: pnpm test

      - name: Contract tests
        timeout-minutes: 2
        run: |
          # Start demo server in background with tsx
          npx tsx examples/x402-paid-fetch/server.ts &
          SERVER_PID=$!
          sleep 3

          # Run contract tests
          node --test tests/contract/suite.test.js

          # Cleanup
          kill $SERVER_PID || true

      - name: Adapter size check
        run: |
          echo "Checking adapter sizes (‚â§100 SLOC)..."

          # LangChain TypeScript
          LC_LINES=$(wc -l < packages/adapters/langchain/index.ts)
          echo "LangChain: $LC_LINES lines"

          # Camel Python
          CAMEL_LINES=$(wc -l < packages/adapters/camel/decorator.py)
          echo "Camel: $CAMEL_LINES lines"

          # Firecrawl TypeScript
          FC_LINES=$(wc -l < packages/adapters/firecrawl/index.ts)
          echo "Firecrawl: $FC_LINES lines"

          # Enforce limits
          if [ $LC_LINES -gt 100 ] || [ $CAMEL_LINES -gt 100 ] || [ $FC_LINES -gt 100 ]; then
            echo "‚ùå Adapter size limit exceeded"
            exit 1
          fi

      - name: Security baseline
        run: |
          set -euo pipefail
          if grep -r "peac\.dev/problems" packages/ apps/; then echo "Found old problem domain"; exit 1; fi
          if grep -r "X-PEAC-" packages/ apps/; then echo "Found banned X-PEAC- header"; exit 1; fi
          if grep -r "TODO\|FIXME\|HACK\|DEBUG" packages/*/src apps/*/src --exclude-dir=node_modules; then echo "Found dev markers"; exit 1; fi

      - name: Documentation check
        run: |
          MISSING=0
          for doc in README.md docs/problems.md CHANGELOG.md; do
            if [ ! -f "$doc" ]; then echo "‚ùå Missing: $doc"; MISSING=1; fi
          done
          [ $MISSING -eq 0 ]

      - name: Performance benchmarks (verify p95, throughput)
        run: npx tsx scripts/bench-verify.ts

      - name: Validate vectors against schema
        run: |
          set -euo pipefail
          VECTOR_COUNT=$(ls tests/golden/receipt-vectors/*.json | grep -v jwks.json | wc -l)
          if [ $VECTOR_COUNT -lt 100 ]; then
            echo "‚ùå Need ‚â•100 vectors, got $VECTOR_COUNT"
            exit 1
          fi
          npx ajv validate -s schemas/receipt-0.9.json \
            -d "tests/golden/receipt-vectors/*.json" \
            --exclude="**/jwks.json"

  release-ready:
    needs: quality-gates
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Release checklist
        run: |
          echo "üöÄ Release Quality Gates"
          echo "‚úÖ Multi-Node compatibility (18, 20)"
          echo "‚úÖ 100+ test vectors generated"
          echo "‚úÖ Contract tests passing"
          echo "‚úÖ Adapter size limits enforced"
          echo "‚úÖ Security baseline clean"
          echo "‚úÖ Documentation present"
          echo "‚úÖ Performance targets enforced"
          echo ""
          echo "üéØ Ready for production deployment"
