diff --git a/packages/server/jest.config.js b/packages/server/jest.config.js
index 0000000..1111111 100644
--- a/packages/server/jest.config.js
+++ b/packages/server/jest.config.js
@@ -1,19 +1,27 @@
-/** @type {import('jest').Config} */
-module.exports = {
-  preset: 'ts-jest',
-  testEnvironment: 'node',
-  testMatch: ['<rootDir>/tests/**/*.test.ts'],
-  // NOTE:
-  // - No deprecated "globals['ts-jest']" block here.
-  // - tsconfig already contains "isolatedModules": true
-  transform: {
-    '^.+\\.ts$': [
-      'ts-jest',
-      {
-        tsconfig: '<rootDir>/tsconfig.json',
-        isolatedModules: true,
-      }
-    ]
-  }
-};
+/** @type {import('jest').Config} */
+module.exports = {
+  preset: 'ts-jest',
+  testEnvironment: 'node',
+  testMatch: ['<rootDir>/tests/**/*.test.ts'],
+  transform: {
+    '^.+\\.ts$': [
+      'ts-jest',
+      {
+        tsconfig: '<rootDir>/tsconfig.json',
+        isolatedModules: true,
+        diagnostics: { warnOnly: true }
+      }
+    ]
+  },
+  collectCoverageFrom: [
+    'src/**/*.ts',
+    '!src/**/*.d.ts'
+  ],
+  coverageDirectory: 'coverage'
+};
diff --git a/packages/server/src/middleware/headers.ts b/packages/server/src/middleware/headers.ts
index 0000000..1111111 100644
--- a/packages/server/src/middleware/headers.ts
+++ b/packages/server/src/middleware/headers.ts
@@ -1,171 +1,171 @@
 import type { Request, Response, NextFunction } from 'express';
 
 /**
  * Wire-level headers + version negotiation.
- * - Always echo x-peac-protocol-version: 0.9.5
- * - Accept 0.9.3..0.9.5; normalize to 0.9.5
- * - Legacy name usage or older-but-supported request: emit JSON console.warn + count "legacy hits"
- * - On 426, return RFC7807 + supported list + traceparent
- * - Staging canary: error-log if any X-PEAC-* header is emitted with uppercase chars
+ * Policy (development-only, pre-1.0):
+ * - Echo x-peac-protocol-version: 0.9.5 on all responses.
+ * - Accept ONLY 0.9.5.
+ * - If legacy header name x-peac-version is used (any value), log a
+ *   structured deprecation warning, but still enforce version == 0.9.5.
+ * - For unsupported/invalid versions, return 426 with RFC7807 payload
+ *   and include x-peac-protocol-version-supported: 0.9.5.
+ * - Staging canary: error-log if any X-PEAC-* header is emitted with uppercase chars.
  */
 
-const ECHO = '0.9.5';
-const SUPPORTED = ['0.9.5', '0.9.4', '0.9.3'];
-const MIN_SUPPORTED_PATCH = 3;
+const ECHO = '0.9.5';
+const SUPPORTED = ['0.9.5'];
+const MIN_SUPPORTED_PATCH = 5;
 
 // ---- utils --------------------------------------------------------------------
 
 function pickFirst(h: undefined | string | string[]): string | undefined {
   if (Array.isArray(h)) return h[0];
   if (typeof h === 'string') {
     const i = h.indexOf(',');
     return (i === -1 ? h : h.slice(0, i)).trim();
   }
   return undefined;
 }
 
 function cryptoHex(n: number): string {
   return require('crypto').randomBytes(n).toString('hex');
 }
 
 function ensureTrace(req: Request, res: Response): string {
   let tp = (req.headers['traceparent'] as string | undefined) || '';
   let traceId = '';
   if (tp) {
     const parts = String(tp).split('-');
     if (parts.length >= 2) traceId = parts[1];
   }
   if (!traceId) {
     const b = cryptoHex(16);
     const span = cryptoHex(8);
     tp = `00-${b}-${span}-01`;
     traceId = b;
   }
   res.setHeader('traceparent', tp);
   return `urn:trace:${traceId}`;
 }
 
 // Process-wide counters (intentionally global so tests can read the same object)
 let legacyCounters: { hits: number; total: number } =
   (globalThis as any).__peacLegacyHeaderCounters__ ||
   ((globalThis as any).__peacLegacyHeaderCounters__ = { hits: 0, total: 0 });
 
 export function getLegacyHeaderMetrics() {
   return { ...legacyCounters };
 }
 
 // ---- header normalization middleware -----------------------------------------
 
 export function headerMiddleware(_req: Request, res: Response, next: NextFunction) {
   const origSetHeader = res.setHeader.bind(res);
 
   // Lower-case enforcement for X-PEAC-* + staging canary.
   (res as any).setHeader = (name: string, value: any) => {
     const lower = name.toLowerCase();
 
     if (lower.startsWith('x-peac-')) {
       if (process.env.NODE_ENV === 'staging' && /[A-Z]/.test(name)) {
         console.error(`CANARY: Uppercase header emission detected: ${name}`);
       }
       return origSetHeader(lower, value);
     }
     return origSetHeader(name, value);
   };
 
   // Always echo the current protocol version on successful responses.
   res.setHeader('x-peac-protocol-version', ECHO);
 
   next();
 }
 
 // ---- version negotiation middleware ------------------------------------------
 
 export function versionNegotiationMiddleware(req: Request, res: Response, next: NextFunction) {
   const currentHdr = pickFirst((req.headers as any)['x-peac-protocol-version']);
-  const legacyHdr  = pickFirst((req.headers as any)['x-peac-version']);
+  const legacyHdr  = pickFirst((req.headers as any)['x-peac-version']);
 
   // Count every time a caller sends *any* version header.
   if (currentHdr || legacyHdr) legacyCounters.total += 1;
 
   let requested = currentHdr;
   let warned = false;
 
   // If they used the truly-legacy header name, warn + count a legacy "hit".
   if (!requested && legacyHdr) {
     try {
       console.warn(JSON.stringify({
-  level: 'warn',
-  code: 'outdated-version',
-  message: 'Requested protocol version is outdated',
-  requested,          // e.g. "0.9.3"
-  minimum: ECHO,      // e.g. "0.9.5"
-  header: 'x-peac-protocol-version',
-  recommendation: 'Update client to a compatible protocol version'
-}));
+        level: 'warn',
+        code: 'legacy-header',
+        message: 'Deprecated header x-peac-version',
+        header: 'x-peac-version',
+        recommendation: 'Use x-peac-protocol-version instead'
+      }));
     } catch {}
     legacyCounters.hits += 1;
     requested = legacyHdr;
     warned = true;
   }
 
   // No requested version -> proceed; echo header already set by headerMiddleware.
   if (!requested) return next();
 
   // Strict parse 0.9.x
   const m = String(requested).match(/^(\d+)\.(\d+)\.(\d+)$/);
   if (!m) {
     res.setHeader('x-peac-protocol-version-supported', SUPPORTED.join(','));
     res.setHeader('content-type', 'application/problem+json');
     const body = {
       type: 'https://peacprotocol.org/problems/unsupported-version',
       title: 'Upgrade Required',
       status: 426,
       detail: `Requested version ${requested} is not supported`,
       instance: ensureTrace(req, res)
     };
     res.status(426).end(JSON.stringify(body));
     return;
   }
 
-  const [, maj, min, patStr] = m;
-  const patch = Number(patStr);
-  const echoPatch = Number(ECHO.split('.')[2]);
+  const [, maj, min, patStr] = m;
+  const patch = Number(patStr);
 
-  // Accept exactly 0.9.[3..echo], normalize to ECHO (0.9.5)
-  if (maj === '0' && min === '9' && patch >= MIN_SUPPORTED_PATCH && patch <= echoPatch) {
+  // Accept exactly 0.9.5; normalize to ECHO (0.9.5)
+  if (maj === '0' && min === '9' && patch === MIN_SUPPORTED_PATCH) {
     res.setHeader('x-peac-protocol-version', ECHO);
-
-    // If an older-but-supported version was explicitly requested via current header,
-    // warn + count a legacy hit (tests expect this).
-    if (!warned && patch < echoPatch) {
-      try {
-        console.warn(JSON.stringify({
-          level: 'warn',
-          code: 'legacy-header',
-          message: 'Deprecated header x-peac-protocol-version',
-          recommendation: 'Use x-peac-protocol-version instead'
-        }));
-      } catch {}
-      legacyCounters.hits += 1;
-    }
-
     return next();
   }
 
   // Unsupported -> 426 problem details
   res.setHeader('x-peac-protocol-version-supported', SUPPORTED.join(','));
   res.setHeader('content-type', 'application/problem+json');
   const body = {
     type: 'https://peacprotocol.org/problems/unsupported-version',
     title: 'Upgrade Required',
     status: 426,
     detail: `Requested version ${requested} is not supported`,
     instance: ensureTrace(req, res)
   };
   res.status(426).end(JSON.stringify(body));
 }
 
 export default {};
diff --git a/packages/server/src/http/payment.ts b/packages/server/src/http/payment.ts
index 0000000..1111111 100644
--- a/packages/server/src/http/payment.ts
+++ b/packages/server/src/http/payment.ts
@@ -1,90 +1,51 @@
-/* istanbul ignore file */
-import type { Request, Response } from 'express';
-
-// LEGACY helper removed: protocol header will be echoed by middleware
-// function setProtocolHeader(res: Response) {
-//   if ('set' in res && typeof (res as any).set === 'function') (res as any).set('x-peac-protocol-version', '0.9.3');
-//   else if ('setHeader' in res && typeof res.setHeader === 'function') res.setHeader('x-peac-protocol-version', '0.9.3');
-// }
-
-export function handlePayment(_req: Request, res: Response): void {
-  res.setHeader('content-type', 'application/json');
-  // setProtocolHeader(res); // REMOVE: middleware echoes 0.9.5
-
-  res.status(200).end(JSON.stringify({
-    ok: true
-  }));
-}
+/* istanbul ignore file */
+import type { Request, Response } from 'express';
+import { v4 as uuidv4 } from 'uuid';
+
+const timeout = (ms: number) => new Promise<void>(resolve => setTimeout(resolve, ms));
+
+export async function handlePayment(req: Request, res: Response): Promise<void> {
+  res.set('content-type', 'application/json');
+
+  // simulate some async work
+  await timeout(5);
+
+  const id = uuidv4();
+  const amount = Number(req.query.amount ?? 0) || 0;
+
+  if (!Number.isFinite(amount) || amount <= 0) {
+    res.status(400).json({
+      type: 'https://peacprotocol.org/problems/invalid-payment-request',
+      title: 'Bad Request',
+      status: 400,
+      detail: 'Amount must be a positive number',
+      instance: id
+    });
+    return;
+  }
+
+  res.status(200).json({
+    payment_id: id,
+    amount,
+    currency: 'USD',
+    status: 'accepted'
+  });
+}
diff --git a/packages/server/src/http/wellKnown.ts b/packages/server/src/http/wellKnown.ts
index 0000000..1111111 100644
--- a/packages/server/src/http/wellKnown.ts
+++ b/packages/server/src/http/wellKnown.ts
@@ -1,40 +1,33 @@
-/* istanbul ignore file */
-import type { Request, Response } from 'express';
-
-// legacy header name should not be used in 0.9.5; middleware echoes protocol
-// function setLegacyHeader(res: Response) {
-//   if ('set' in res && typeof (res as any).set === 'function') (res as any).set('x-peac-version', '0.9.3');
-//   else if ('setHeader' in res && typeof res.setHeader === 'function') res.setHeader('x-peac-version', '0.9.3');
-// }
-
-export function handleWellKnown(_req: Request, res: Response): void {
-  res.setHeader('content-type', 'application/json');
-  // setLegacyHeader(res); // REMOVE
-
-  res.status(200).end(JSON.stringify({
-    peac_version: '0.9.3',
-    capabilities: { verify: true, pay: true }
-  }));
-}
+/* istanbul ignore file */
+import type { Request, Response } from 'express';
+
+export function handleWellKnown(_req: Request, res: Response): void {
+  res.set('content-type', 'application/json');
+  res.status(200).json({
+    peac_version: '0.9.5',
+    capabilities: {
+      verify: true,
+      pay: true,
+      property_rights_preview: true,
+      redistribution_preview: true
+    },
+    rights: {
+      standards: ['erc20', 'erc721', 'erc1155'],
+      claim_schema: 'urn:peac:claims:0.1',
+      registry: null,
+      notes:
+        'Property rights are accepted as signed claims and counted (preview), not enforced in 0.9.5.'
+    }
+  });
+}
diff --git a/packages/server/tests/unit/version-negotiation.test.ts b/packages/server/tests/unit/version-negotiation.test.ts
index 0000000..1111111 100644
--- a/packages/server/tests/unit/version-negotiation.test.ts
+++ b/packages/server/tests/unit/version-negotiation.test.ts
@@ -1,220 +1,180 @@
-import express, { Request, Response } from 'express';
-import request from 'supertest';
-import { headerMiddleware, versionNegotiationMiddleware } from '../../src/middleware/headers';
-
-const APP = () => {
-  const app = express();
-  app.use(headerMiddleware);
-  app.use(versionNegotiationMiddleware);
-  app.get('/test', (_req: Request, res: Response) => {
-    res.status(200).send('ok');
-  });
-  return app;
-};
-
-describe('Version Negotiation (older supported)', () => {
-  let app: ReturnType<typeof APP>;
-  let consoleWarnSpy: jest.SpyInstance;
-
-  beforeEach(() => {
-    app = APP();
-    consoleWarnSpy = jest.spyOn(console, 'warn').mockImplementation(() => {});
-  });
-
-  afterEach(() => {
-    consoleWarnSpy.mockRestore();
-  });
-
-  it('echoes 0.9.5 when no header present', async () => {
-    const res = await request(app).get('/test');
-    expect(res.status).toBe(200);
-    expect(res.headers['x-peac-protocol-version']).toBe('0.9.5');
-  });
-
-  it('accepts exact current version via x-peac-protocol-version', async () => {
-    const res = await request(app)
-      .get('/test')
-      .set('x-peac-protocol-version', '0.9.5');
-    expect(res.status).toBe(200);
-    expect(res.headers['x-peac-protocol-version']).toBe('0.9.5');
-  });
-
-  it('rejects 0.9.4 via x-peac-protocol-version with 426 + supported list', async () => {
-    const res = await request(app)
-      .get('/test')
-      .set('x-peac-protocol-version', '0.9.4');
-    expect(res.status).toBe(426);
-    expect(res.headers['x-peac-protocol-version-supported']).toBe('0.9.5');
-  });
-
-  it('rejects 0.9.3 via x-peac-protocol-version with 426 + supported list', async () => {
-    const res = await request(app)
-      .get('/test')
-      .set('x-peac-protocol-version', '0.9.3');
-    expect(res.status).toBe(426);
-    expect(res.headers['x-peac-protocol-version-supported']).toBe('0.9.5');
-  });
-
-  it('accepts legacy header name x-peac-version only if value is 0.9.5; logs deprecation', async () => {
-    const res = await request(app)
-      .get('/test')
-      .set('x-peac-version', '0.9.5');
-    expect(res.status).toBe(200);
-    expect(res.headers['x-peac-protocol-version']).toBe('0.9.5');
-    expect(consoleWarnSpy).toHaveBeenCalled();
-    const warning = JSON.parse(consoleWarnSpy.mock.calls[0][0]);
-    expect(warning.code).toBe('legacy-header');
-    expect(warning.message).toContain('Deprecated header x-peac-version');
-    expect(warning.recommendation).toBe('Use x-peac-protocol-version instead');
-  });
-
-  it('rejects invalid version strings with 426', async () => {
-    const res = await request(app)
-      .get('/test')
-      .set('x-peac-protocol-version', 'banana');
-    expect(res.status).toBe(426);
-    expect(res.headers['x-peac-protocol-version-supported']).toBe('0.9.5');
-  });
-});
+import express, { Request, Response } from 'express';
+import request from 'supertest';
+import { headerMiddleware, versionNegotiationMiddleware } from '../../src/middleware/headers';
+
+const APP = () => {
+  const app = express();
+  app.use(headerMiddleware);
+  app.use(versionNegotiationMiddleware);
+  app.get('/test', (_req: Request, res: Response) => {
+    res.status(200).send('ok');
+  });
+  return app;
+};
+
+describe('Version Negotiation (strict 0.9.5 only)', () => {
+  let app: ReturnType<typeof APP>;
+  let consoleWarnSpy: jest.SpyInstance;
+
+  beforeEach(() => {
+    app = APP();
+    consoleWarnSpy = jest.spyOn(console, 'warn').mockImplementation(() => {});
+  });
+
+  afterEach(() => {
+    consoleWarnSpy.mockRestore();
+  });
+
+  it('echoes 0.9.5 when no header present', async () => {
+    const res = await request(app).get('/test');
+    expect(res.status).toBe(200);
+    expect(res.headers['x-peac-protocol-version']).toBe('0.9.5');
+  });
+
+  it('accepts exact current version via x-peac-protocol-version', async () => {
+    const res = await request(app)
+      .get('/test')
+      .set('x-peac-protocol-version', '0.9.5');
+    expect(res.status).toBe(200);
+    expect(res.headers['x-peac-protocol-version']).toBe('0.9.5');
+  });
+
+  it('rejects 0.9.4 via x-peac-protocol-version with 426 + supported list', async () => {
+    const res = await request(app)
+      .get('/test')
+      .set('x-peac-protocol-version', '0.9.4');
+    expect(res.status).toBe(426);
+    expect(res.headers['x-peac-protocol-version-supported']).toBe('0.9.5');
+  });
+
+  it('rejects 0.9.3 via x-peac-protocol-version with 426 + supported list', async () => {
+    const res = await request(app)
+      .get('/test')
+      .set('x-peac-protocol-version', '0.9.3');
+    expect(res.status).toBe(426);
+    expect(res.headers['x-peac-protocol-version-supported']).toBe('0.9.5');
+  });
+
+  it('accepts legacy header name x-peac-version only if value is 0.9.5; logs deprecation', async () => {
+    const res = await request(app)
+      .get('/test')
+      .set('x-peac-version', '0.9.5');
+    expect(res.status).toBe(200);
+    expect(res.headers['x-peac-protocol-version']).toBe('0.9.5');
+    expect(consoleWarnSpy).toHaveBeenCalled();
+    const warning = JSON.parse(consoleWarnSpy.mock.calls[0][0]);
+    expect(warning.code).toBe('legacy-header');
+    expect(warning.message).toContain('Deprecated header x-peac-version');
+    expect(warning.recommendation).toBe('Use x-peac-protocol-version instead');
+  });
+
+  it('rejects invalid version strings with 426', async () => {
+    const res = await request(app)
+      .get('/test')
+      .set('x-peac-protocol-version', 'banana');
+    expect(res.status).toBe(426);
+    expect(res.headers['x-peac-protocol-version-supported']).toBe('0.9.5');
+  });
+});
